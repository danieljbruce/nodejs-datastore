// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import {Query} from './index';
const AGGREGATE_QUERY = Symbol('AGGREGATE_QUERY');

class AggregateQuery {
  type = AGGREGATE_QUERY
  aggregations: Array<AggregateField>
  query: Query | undefined;

  constructor(query: Query) {
    this.query = query;
    this.aggregations = [];
  }

  aggregate(aggregates: AggregateField[]): AggregateQuery {
    aggregates.forEach(aggregate => this.aggregations.push(aggregate));
    return this;
  }

  toProto(): any {
    return this.aggregations.map(aggregation => aggregation.toProto())
  }
}

abstract class AggregateField {
  alias_?: string;

  static count(): Count {
    return new Count();
  }

  alias(alias: string): AggregateField {
    this.alias_ = alias;
    return this;
  }

  abstract toProto(): any;
}

class Count extends AggregateField {
  upTo_?: number;

  upTo(upTo: number): AggregateField {
    this.upTo_ = upTo;
    return this;
  }

  toProto(): any {
    const convertedUpTo = this.upTo_ ? {upTo: {value: this.upTo_}} : null;
    const count = Object.assign({}, convertedUpTo);
    return Object.assign({count}, this.alias_ ? {alias: this.alias_} : null);
  }
}

export {AggregateField, AggregateQuery, AGGREGATE_QUERY};
